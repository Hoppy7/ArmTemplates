# Hoppy7/ArmTemplates
name: $(Date:yyyyMMdd)$(Rev:.r)

trigger: 
  batch: false
  branches: 
    include:
      - master
  paths:
    include:
      - "*"

variables:
  agentImage: windows-2019
  azureSubscription: RossHopkinsIC
  resourceGroupName: RG-ADO-CI
  resourceGroupLocation: WestUS2
  paramFileSuffix: parameters.dev.json

stages:
- stage: CI_Build
  jobs:
  - job: Build
    workspace:
      clean: all
    pool:
      vmImage: $(agentImage)
    steps:
    - task: AzurePowerShell@4
      displayName: ARM Template BVTs
      condition: succeeded()
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: inlineScript
        inline: |
          $pesterVersion = "4.10.1";
          Install-Module -Name Pester -Scope CurrentUser -RequiredVersion $pesterVersion -Force;
          Import-Module Pester -RequiredVersion $pesterVersion -Force;
          
          $splat = @{
            Script = @{
              Path       = "$(Build.SourcesDirectory)\Invoke-ciBuild.tests.ps1";
              Parameters = @{ 
                resourceGroupName = "$(resourceGroupName)";
                location          = "$(resourceGroupLocation)";
                path              = "$(Build.SourcesDirectory)";
                paramFileSuffix   = "$(paramFileSuffix)";
              }
            }
            OutputFile   = "$(Build.SourcesDirectory)\ArmTemplateCiBuild.Results.xml";
            OutputFormat = "NUnitXML";
            PassThru     = $true;
            Strict       = $true;
          }
          $pester = Invoke-Pester @splat;
          
          if ($pester.TotalCount -eq $pester.PassedCount)
          {
            Write-Host "##vso[task.complete result=Succeeded;]DONE";
          }
          else
          {
            Write-Host "##vso[task.complete result=Failed;]DONE";
          }
        errorActionPreference: stop
        azurePowerShellVersion: latestVersion

    - task: CopyFiles@2
      condition: succeeded()
      displayName: Copy Files to ArtifactStagingDirectory
      inputs:
        sourceFolder: $(Build.SourcesDirectory)
        contents: |
          **\**.json
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      condition: succeeded()
      displayName: 'Publish Artifact'

    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: always()
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: "*.results.xml"
        searchFolder: $(Build.SourcesDirectory)
